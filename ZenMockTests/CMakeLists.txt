cmake_minimum_required(VERSION 3.2)
project(ZenMockTests)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
include_directories(${CMAKE_SOURCE_DIR})
include_directories(${ZenUnitIncludeDirectory})
if(EXISTS ${GoogleBenchmarkIncludeDirectory})
   include_directories(${GoogleBenchmarkIncludeDirectory})
endif()

folder_source_group(0Args)
folder_source_group(1Arg)
folder_source_group(2Args)
folder_source_group(Exceptions)
folder_source_group(Mock)
folder_source_group(ZenMockers)
folder_source_group(Testing)
folder_source_group(ZenMock)
folder_source_group(ZenMockers)
folder_source_group_subfolder(ZenMockers 0Args)
folder_source_group_subfolder(ZenMockers 1Arg)
folder_source_group_subfolder(ZenMockers 2Args)
folder_source_group_subfolder(ZenMockers 3Args)
folder_source_group_subfolder(ZenMockers 4Args)
folder_source_group_subfolder(ZenMockers 5Args)
folder_source_group_subfolder(ZenMockers 6Args)
folder_source_group_subfolder(ZenMockers 7Args)
folder_source_group_subfolder(ZenMockers 8Args)
folder_source_group_subfolder(ZenMockers 9Args)
folder_source_group_subfolder(ZenMockers 10Args)

source_group("" FILES ZenMockTestMain.cpp pch.h pch.cpp)
file(GLOB_RECURSE Sources *.h *.cpp)

add_executable(ZenMockTests ${Sources})
target_link_libraries(ZenMockTests ZenUnitTestUtils)

if(UNIX)
   target_link_libraries(ZenMockTests stdc++fs)
endif()

if(EXISTS ${GoogleBenchmarkIncludeDirectory})
   target_link_libraries(ZenMockTests ${GoogleBenchmarkLibraryPath})
   if(WIN32)
      target_link_libraries(ZenMockTests shlwapi)
   endif()
endif()

EnablePrecompiledHeaders()
IfMSVCAddRunTestsPostBuildStep()

if(UNIX)
   if(CodeCovMode)
     target_link_libraries(ZenMockTests CodeCovLibraryInterface)
   endif()
endif()
