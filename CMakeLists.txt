cmake_minimum_required(VERSION 3.2)
project(ZenUnitAndZenMock)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

if(UNIX)
   set(CMAKE_CXX_FLAGS "-std=c++17 -Wall -Wextra -Werror -pthread -Wno-unused-parameter")
   if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
      append(CMAKE_CXX_FLAGS "-pedantic -Wno-gnu-zero-variadic-macro-arguments")
   elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
      append(CMAKE_CXX_FLAGS "-Wno-attributes -Wno-nonnull")
   endif()
   option(ClangTidyMode "Sets CMAKE_EXPORT_COMPILE_COMMANDS to ON" OFF)
   option(ClangSanitizerMode_AddressAndUndefined "Appends -fsanitize=address,undefined" OFF)
   option(ClangSanitizerMode_Thread "Appends -fsanitize=thread" OFF)
   option(ClangCoverageMode "Appends -fcoverage-mapping and -fprofile-instr-generate=coverage.profraw" OFF)
   if(ClangTidyMode)
      set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
      message("ClangTidyMode enabled: CMAKE_EXPORT_COMPILE_COMMANDS set to ON")
   elseif(ClangSanitizerMode_AddressAndUndefined)
      append(CMAKE_CXX_FLAGS "-fsanitize=address,undefined")
      message("ClangSanitizerMode_AddressAndUndefined enabled: -fsanitize=address,undefined appended to CMAKE_CXX_FLAGS")
   elseif(ClangSanitizerMode_Thread)
      append(CMAKE_CXX_FLAGS "-fsanitize=thread")
      message("ClangSanitizerMode_Thread enabled: -fsanitize=thread appended to CMAKE_CXX_FLAGS")
   elseif(ClangCoverageMode)
      append(CMAKE_CXX_FLAGS "-fcoverage-mapping -fprofile-instr-generate=coverage.profraw")
      message("ClangCoverageMode enabled: -fcoverage-mapping -fprofile-instr-generate=coverage.profraw appended to CMAKE_CXX_FLAGS")
   elseif(CodeCovMode)
      add_library(CodeCovLibraryInterface INTERFACE)
      target_compile_options(CodeCovLibraryInterface INTERFACE -O0 -g --coverage)
      target_link_libraries(CodeCovLibraryInterface INTERFACE --coverage)
   endif()
elseif(MSVC)
   set(CMAKE_CXX_FLAGS "/EHsc /MP /sdl /std:c++17 /Wall /WX /Zc:rvalueCast /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING")
   replace(CMAKE_EXE_LINKER_FLAGS_DEBUG "/debug" "/debug:fastlink")
   replace(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/debug" "/debug:fastlink")
   if(FastWindowsReleaseBuildMode)
      replace(CMAKE_CXX_FLAGS_RELEASE "/O2" "/Od")
      replace(CMAKE_CXX_FLAGS_RELEASE "/Ob2" "/Ob0")
      message("FastWindowsReleaseBuildMode enabled: /O2 replaced with /Od and /Ob2 replaced with /Ob0 to minimize Release build times")
   endif()
   set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

if(NOT APPLE)
   add_subdirectory(ZenUnit)
   add_subdirectory(ZenMock)
endif()
add_subdirectory(ZenUnitUtilsAndAssertionTests)
add_subdirectory(ZenUnitExamples)
add_subdirectory(ZenUnitLibraryTests)
add_subdirectory(ZenUnitTestUtils)
add_subdirectory(ZenUnitCompileSpeedTester)
add_subdirectory(ZenMockExamples)
add_subdirectory(ZenMockTests)

set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY ON)

if(UNIX)
   include(ProcessorCount)
   ProcessorCount(numberOfThreads)
   add_custom_target(clang-tidy COMMAND
      find -name "*.cpp" -print0 | xargs -0 -n 1 -P ${numberOfThreads} -t clang-tidy -header-filter=.* -p ${CMAKE_BUILD_TYPE}
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} VERBATIM USES_TERMINAL)
   add_dependencies(clang-tidy ZenUnitUtilsAndAssertionTestsPch ZenUnitExamplesPch ZenUnitLibraryTestsPch ZenUnitTestUtilsPch ZenMockTestsPch ZenMockExamplesPch)
endif()

